// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalonSystem.Data;

#nullable disable

namespace SalonSystem.Data.Migrations
{
    [DbContext(typeof(SalonSystemDbContext))]
    partial class SalonSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalonSystem.Models.Salons.Salon", b =>
                {
                    b.Property<int>("SalonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalonId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalonId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("SalonSystem.Models.Services.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("SalonId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.ServiceSkill", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ServiceSkills");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.HasKey("SkillId");

                    b.HasIndex("SalonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.TechnicianSkill", b =>
                {
                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("TechnicianId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("TechnicianSkills");
                });

            modelBuilder.Entity("SalonSystem.Models.Technicians.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("TechnicianId");

                    b.HasIndex("SalonId");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("SalonSystem.Models.Services.Service", b =>
                {
                    b.HasOne("SalonSystem.Models.Salons.Salon", "AssociatedSalon")
                        .WithMany("Services")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedSalon");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.ServiceSkill", b =>
                {
                    b.HasOne("SalonSystem.Models.Services.Service", "Service")
                        .WithMany("ServiceSkills")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SalonSystem.Models.Skills.Skill", "Skill")
                        .WithMany("ServiceSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.Skill", b =>
                {
                    b.HasOne("SalonSystem.Models.Salons.Salon", "AssociatedSalon")
                        .WithMany("Skills")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonSystem.Models.Services.Service", null)
                        .WithMany("RequiredSkills")
                        .HasForeignKey("ServiceId");

                    b.HasOne("SalonSystem.Models.Technicians.Technician", null)
                        .WithMany("SkillSet")
                        .HasForeignKey("TechnicianId");

                    b.Navigation("AssociatedSalon");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.TechnicianSkill", b =>
                {
                    b.HasOne("SalonSystem.Models.Skills.Skill", "Skill")
                        .WithMany("TechnicianSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SalonSystem.Models.Technicians.Technician", "Technician")
                        .WithMany("TechnicianSkills")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SalonSystem.Models.Technicians.Technician", b =>
                {
                    b.HasOne("SalonSystem.Models.Salons.Salon", "AssociatedSalon")
                        .WithMany("Technicians")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedSalon");
                });

            modelBuilder.Entity("SalonSystem.Models.Salons.Salon", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Skills");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("SalonSystem.Models.Services.Service", b =>
                {
                    b.Navigation("RequiredSkills");

                    b.Navigation("ServiceSkills");
                });

            modelBuilder.Entity("SalonSystem.Models.Skills.Skill", b =>
                {
                    b.Navigation("ServiceSkills");

                    b.Navigation("TechnicianSkills");
                });

            modelBuilder.Entity("SalonSystem.Models.Technicians.Technician", b =>
                {
                    b.Navigation("SkillSet");

                    b.Navigation("TechnicianSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
