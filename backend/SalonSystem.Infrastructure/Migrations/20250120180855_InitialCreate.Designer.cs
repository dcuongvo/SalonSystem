// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalonSystem.Infrastructure.Data;

#nullable disable

namespace SalonSystem.Infrastructure.Migrations
{
    [DbContext(typeof(SalonSystemDbContext))]
    [Migration("20250120180855_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.AppointmentService", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.AppointmentTechnician", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId", "TechnicianId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("AppointmentTechnicians");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.TimeBlock", b =>
                {
                    b.Property<int>("TimeBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeBlockId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BlockTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("TechnicianScheduleId")
                        .HasColumnType("int");

                    b.HasKey("TimeBlockId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TechnicianScheduleId");

                    b.ToTable("TimeBlocks");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Employees.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");

                    b.HasDiscriminator().HasValue("Employee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.DayClose", b =>
                {
                    b.Property<int>("DayCloseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayCloseId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("DayCloseId");

                    b.HasIndex("SalonId");

                    b.ToTable("DayCloses");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.Salon", b =>
                {
                    b.Property<int>("SalonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalonId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalonId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.SalonSchedule", b =>
                {
                    b.Property<int>("SalonScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalonScheduleId"));

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("SalonScheduleId");

                    b.HasIndex("SalonId");

                    b.ToTable("SalonSchedules");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("SalonId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.ServiceSkill", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ServiceSkills");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.HasIndex("SalonId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.DayOff", b =>
                {
                    b.Property<int>("DayOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayOffId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.HasKey("DayOffId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.TechnicianSchedule", b =>
                {
                    b.Property<int>("TechnicianScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianScheduleId"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.HasKey("TechnicianScheduleId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianSchedules");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.TechnicianSkill", b =>
                {
                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("TechnicianId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("TechnicianSkills");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Users.SubUser", b =>
                {
                    b.Property<int>("SubUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubUserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubUserId");

                    b.HasIndex("OwnerId");

                    b.ToTable("SubUsers");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.Technician", b =>
                {
                    b.HasBaseType("SalonSystem.Domain.Entities.Employees.Employee");

                    b.HasIndex("SalonId");

                    b.HasDiscriminator().HasValue("Technician");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.AppointmentService", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonSystem.Domain.Entities.Services.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.AppointmentTechnician", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithMany("AppointmentTechnicians")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonSystem.Domain.Entities.Technicians.Technician", "Technician")
                        .WithMany("AppointmentTechnicians")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.TimeBlock", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("SalonSystem.Domain.Entities.Technicians.TechnicianSchedule", "TechnicianSchedule")
                        .WithMany("TimeBlocks")
                        .HasForeignKey("TechnicianScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("TechnicianSchedule");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.DayClose", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Salons.Salon", "Salon")
                        .WithMany("DayCloses")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.Salon", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Users.User", "Owner")
                        .WithMany("Salons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.SalonSchedule", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Salons.Salon", "Salon")
                        .WithMany("SalonSchedules")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.Service", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Salons.Salon", "AssociatedSalon")
                        .WithMany("Services")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedSalon");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.ServiceSkill", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Services.Service", "Service")
                        .WithMany("ServiceSkills")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SalonSystem.Domain.Entities.Services.Skill", "Skill")
                        .WithMany("ServiceSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.Skill", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Salons.Salon", "AssociatedSalon")
                        .WithMany("Skills")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedSalon");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.DayOff", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Technicians.Technician", "Technician")
                        .WithMany("DaysOff")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.TechnicianSchedule", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Technicians.Technician", "Technician")
                        .WithMany("TechnicianSchedules")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.TechnicianSkill", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Services.Skill", "Skill")
                        .WithMany("TechnicianSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SalonSystem.Domain.Entities.Technicians.Technician", "Technician")
                        .WithMany("TechnicianSkills")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Users.SubUser", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Users.User", "Owner")
                        .WithMany("SubUsers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.Technician", b =>
                {
                    b.HasOne("SalonSystem.Domain.Entities.Salons.Salon", "AssociatedSalon")
                        .WithMany("Technicians")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedSalon");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("AppointmentTechnicians");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Salons.Salon", b =>
                {
                    b.Navigation("DayCloses");

                    b.Navigation("SalonSchedules");

                    b.Navigation("Services");

                    b.Navigation("Skills");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("ServiceSkills");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Services.Skill", b =>
                {
                    b.Navigation("ServiceSkills");

                    b.Navigation("TechnicianSkills");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.TechnicianSchedule", b =>
                {
                    b.Navigation("TimeBlocks");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Salons");

                    b.Navigation("SubUsers");
                });

            modelBuilder.Entity("SalonSystem.Domain.Entities.Technicians.Technician", b =>
                {
                    b.Navigation("AppointmentTechnicians");

                    b.Navigation("DaysOff");

                    b.Navigation("TechnicianSchedules");

                    b.Navigation("TechnicianSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
